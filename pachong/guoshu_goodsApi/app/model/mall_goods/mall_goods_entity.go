// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package mall_goods

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table mall_goods.
type Entity struct {
	Id            uint64  `orm:"id,primary"      json:"id"`              //
	ShopId        uint64  `orm:"shop_id"         json:"shop_id"`         // 店铺id
	Type          uint    `orm:"type"            json:"type"`            // 商品类型:0=国内商品;1=海外商品
	TypeTags      uint    `orm:"type_tags"       json:"type_tags"`       // 商品类型标签:0=无;1=保税;2=直邮;3=一般贸易
	BuyType       uint    `orm:"buy_type"        json:"buy_type"`        // 购买类型:0=全部;1=微信;2=点卡
	BrandId       uint64  `orm:"brand_id"        json:"brand_id"`        // 品牌ID
	CateId        int64  `orm:"cate_id"         json:"cate_id"`         // 商品分类id
	UnitId        int64   `orm:"unit_id"         json:"unit_id"`         // 商品单位ID
	SpecId        uint64  `orm:"spec_id"         json:"spec_id"`         // 规格ID
	TagsId        string  `orm:"tags_id"         json:"tags_id"`         // 商品标签ID
	Tags          string  `orm:"tags"            json:"tags"`            // 商品展示小标签,输入请使用英文逗号隔开
	GoodsTitle    string  `orm:"goods_title"     json:"goods_title"`     // 商品名
	GoodsStock    uint64  `orm:"goods_stock"     json:"goods_stock"`     // 商品总库存
	GoodsMinPrice float64 `orm:"goods_min_price" json:"goods_min_price"` // 最低售价
	GoodsPrice    float64 `orm:"goods_price"     json:"goods_price"`     // 展示价
	GoodsSale     uint64  `orm:"goods_sale"      json:"goods_sale"`      // 销售数量
	GoodsLook     uint64  `orm:"goods_look"      json:"goods_look"`      // 浏览量
	GoodsContent  string  `orm:"goods_content"   json:"goods_content"`   // 商品内容
	GoodsLogo     string  `orm:"goods_logo"      json:"goods_logo"`      // 商品LOGO
	GoodsImage    string  `orm:"goods_image"     json:"goods_image"`     // 商品图片地址
	GoodsVideo    string  `orm:"goods_video"     json:"goods_video"`     // 商品视频URL
	GoodsDesc     string  `orm:"goods_desc"      json:"goods_desc"`      // 商品描述
	IsAudit       uint    `orm:"is_audit"        json:"is_audit"`        // 是否审核:0=待审核;1=已审核;2=不通过
	AuditText     string  `orm:"audit_text"      json:"audit_text"`      // 审核内容
	AuditAdmin    string  `orm:"audit_admin"     json:"audit_admin"`     // 审核人
	AuditTime     int     `orm:"audit_time"      json:"audit_time"`      // 审核时间
	IsShare       uint    `orm:"is_share"        json:"is_share"`        // 是否共享:0=不共享;1=共享
	ShareTj       uint    `orm:"share_tj"        json:"share_tj"`        // 是否共享推荐
	TcShare       uint    `orm:"tc_share"        json:"tc_share"`        // 同城共享0不限1是
	IsSpecial     uint    `orm:"is_special"      json:"is_special"`      // 是否特价:0=非特价;1=特价
	Integral      uint    `orm:"integral"        json:"integral"`        // 特价消耗积分
	OffsetPrice   float64 `orm:"offset_price"    json:"offset_price"`    // 积分抵扣的金额
	Status        uint    `orm:"status"          json:"status"`          // 商品状态:0=销售中;1=已下架
	IsTj          uint    `orm:"is_tj"           json:"is_tj"`           // 是否推荐:0=推荐;1=不推荐
	IsDeleted     uint    `orm:"is_deleted"      json:"is_deleted"`      // 删除状态:0=未删除;1=删除
	ITime         int64   `orm:"i_time"          json:"i_time"`          // 创建时间
	IAdmin        string  `orm:"i_admin"         json:"i_admin"`         // 添加用户
	UTime         int64   `orm:"u_time"          json:"u_time"`          // 更新时间
	UAdmin        string  `orm:"u_admin"         json:"u_admin"`         // 更新用户
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
