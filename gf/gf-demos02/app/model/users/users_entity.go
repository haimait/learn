// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package users

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_users.
type Entity struct {
    Id                    uint        `orm:"id,primary"               json:"id"`                       //             
    CreatedAt             *gtime.Time `orm:"created_at"               json:"created_at"`               //             
    UpdatedAt             *gtime.Time `orm:"updated_at"               json:"updated_at"`               //             
    DeletedAt             *gtime.Time `orm:"deleted_at"               json:"deleted_at"`               //             
    Uuid                  []byte      `orm:"uuid"                     json:"uuid"`                     //             
    UserName              string      `orm:"user_name"                json:"user_name"`                //             
    PassWord              string      `orm:"pass_word"                json:"pass_word"`                //             
    NickName              string      `orm:"nick_name"                json:"nick_name"`                //             
    HeaderImg             string      `orm:"header_img"               json:"header_img"`               //             
    AuthorityId           string      `orm:"authority_id"             json:"authority_id"`             //             
    AuthorityName         string      `orm:"authority_name"           json:"authority_name"`           //             
    Username              string      `orm:"username"                 json:"username"`                 //             
    Password              string      `orm:"password"                 json:"password"`                 //             
    PhoneData             string      `orm:"phone_data"               json:"phone_data"`               //             
    Manager               string      `orm:"manager"                  json:"manager"`                  //             
    SubstationSn          string      `orm:"substation_sn"            json:"substation_sn"`            // 变电站sn    
    PowerSupplyStationsSn string      `orm:"power_supply_stations_sn" json:"power_supply_stations_sn"` // 所属部门sn  
    CompanyId             uint        `orm:"company_id"               json:"company_id"`               // 所属公司    
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}